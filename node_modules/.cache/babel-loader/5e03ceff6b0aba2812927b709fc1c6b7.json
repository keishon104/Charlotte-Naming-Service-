{"ast":null,"code":"var _jsxFileName = \"/Users/darpa/Documents/Development/blockchain/buildspace/domain-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./styles/App.css\";\nimport { ethers } from \"ethers\"; // import twitterLogo from \"./assets/twitter-logo.svg\";\n\nimport contractAbi from \"./utils/contractAbi.json\"; // Constants\n// const TWITTER_HANDLE = \"_buildspace\";\n// const TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tld = \".clt\";\nconst CONTRACT_ADDRESS = \"0x362A5E2f13A21E21b806362cc636eDfd4dC20B4F\"; // const provider = new ethers.providers.Web3Provider(ethereum);\n// const signer = provider.getSigner();\n// const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\"); //   State data properties\n\n  const [domain, setDomain] = useState(\"\");\n  const [record, setRecord] = useState(\"\");\n  const [network, setNetwork] = useState(\"\");\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask => https://metamask.io/\");\n        return;\n      } //   Method to request access to account.\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the etherum object\", ethereum);\n    } //   Check if we're authorized to access the user's wallet\n\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n\n    const chainId = await ethereum.request({\n      method: \"eth_chainId\"\n    });\n    setNetwork(networks[chainId]);\n    ethereum.on(\"chainChanged\", handleChainChanged); // Reload page when network changes\n\n    function handleChainChanged(_chainId) {\n      window.location.reload();\n    }\n  };\n\n  const mintDomain = async () => {\n    // Don't run if the domain is empty\n    if (!domain) {\n      return;\n    } // Alert the user if the domain is too short\n\n\n    if (domain.length < 3) {\n      alert(\"Domain must be at least 3 characters long\");\n      return;\n    } // Calculate price based on length of domain (change this to match your contract)\n    // 3 chars = 0.5 MATIC, 4 chars = 0.3 MATIC, 5 or more = 0.1 MATIC\n\n\n    const price = domain.length === 3 ? \"0.5\" : domain.length === 4 ? \"0.3\" : \"0.1\";\n    console.log(\"Minting domain\", domain, \"with price\", price);\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let tx = await contract.register(domain, {\n          value: ethers.utils.parseEther(price)\n        }); // Wait for the transaction to be mined\n\n        const receipt = await tx.wait(); // Check if the transaction was successfully completed\n\n        if (receipt.status === 1) {\n          console.log(\"Domain minted! https://mumbai.polygonscan.com/tx/\" + tx.hash); // Set the record for the domain\n\n          tx = contract.setRecord(domain, record);\n          await tx.wait();\n          console.log(\"Record set! https://mumbai.polygonscan.com/tx/\" + tx.hash);\n          setRecord(\"\");\n          setDomain(\"\");\n        } else {\n          alert(\"Transaction failed! Please try again\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; //   Function to render if wallet is not connected yet\n\n\n  const renderNotConnectedContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connect-wallet-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"https://media.giphy.com/media/2A3dOO9CqFPczXc5tD/giphy.gif\",\n      alt: \"Ninja gif\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n\n  const renderInputForm = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"first-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: domain,\n          placeholder: \"domain\",\n          onChange: e => setDomain(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"tld\",\n          children: [\" \", tld, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: record,\n        placeholder: \"How do you Charlotte?\",\n        onChange: e => setRecord(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          disabled: null,\n          onClick: mintDomain,\n          children: \"Mint\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          disabled: null,\n          onClick: null,\n          children: \"Set data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this);\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"header\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"left\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: \"Charlotte Name Service\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"subtitle\",\n              children: \"All things Charlotte! All things Blockchain!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"right\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"Network logo\",\n              className: \"logo\",\n              src: network.includes(\"Polygon\") ? polygonLogo : ethLogo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 15\n            }, this), currentAccount ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\" \", \"Wallet: \", currentAccount.slice(0, 6), \"...\", currentAccount.slice(-4), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \" Not connected \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), !currentAccount && renderNotConnectedContainer, !currentAccount && renderNotConnectedContainer, !currentAccount && renderNotConnectedContainer, currentAccount && renderInputForm(), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"AXArQ1XaD9do8eDDmRH4mOsL43I=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/darpa/Documents/Development/blockchain/buildspace/domain-starter/src/App.js"],"names":["React","useEffect","useState","ethers","contractAbi","tld","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","domain","setDomain","record","setRecord","network","setNetwork","connectWallet","ethereum","window","alert","accounts","request","method","console","log","error","checkIfWalletIsConnected","length","account","chainId","networks","on","handleChainChanged","_chainId","location","reload","mintDomain","price","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","tx","register","value","utils","parseEther","receipt","wait","status","hash","renderNotConnectedContainer","renderInputForm","e","target","includes","polygonLogo","ethLogo","slice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./styles/App.css\";\nimport { ethers } from \"ethers\";\n// import twitterLogo from \"./assets/twitter-logo.svg\";\nimport contractAbi from \"./utils/contractAbi.json\";\n\n// Constants\n// const TWITTER_HANDLE = \"_buildspace\";\n// const TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst tld = \".clt\";\nconst CONTRACT_ADDRESS = \"0x362A5E2f13A21E21b806362cc636eDfd4dC20B4F\";\n\n// const provider = new ethers.providers.Web3Provider(ethereum);\n// const signer = provider.getSigner();\n// const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  //   State data properties\n  const [domain, setDomain] = useState(\"\");\n  const [record, setRecord] = useState(\"\");\n  const [network, setNetwork] = useState(\"\");\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask => https://metamask.io/\");\n        return;\n      }\n      //   Method to request access to account.\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the etherum object\", ethereum);\n    }\n    //   Check if we're authorized to access the user's wallet\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n\n    const chainId = await ethereum.request({ method: \"eth_chainId\" });\n    setNetwork(networks[chainId]);\n\n    ethereum.on(\"chainChanged\", handleChainChanged);\n\n    // Reload page when network changes\n    function handleChainChanged(_chainId) {\n      window.location.reload();\n    }\n  };\n\n  const mintDomain = async () => {\n    // Don't run if the domain is empty\n    if (!domain) {\n      return;\n    }\n    // Alert the user if the domain is too short\n    if (domain.length < 3) {\n      alert(\"Domain must be at least 3 characters long\");\n      return;\n    }\n    // Calculate price based on length of domain (change this to match your contract)\n    // 3 chars = 0.5 MATIC, 4 chars = 0.3 MATIC, 5 or more = 0.1 MATIC\n    const price =\n      domain.length === 3 ? \"0.5\" : domain.length === 4 ? \"0.3\" : \"0.1\";\n    console.log(\"Minting domain\", domain, \"with price\", price);\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          contractAbi.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let tx = await contract.register(domain, {\n          value: ethers.utils.parseEther(price),\n        });\n        // Wait for the transaction to be mined\n        const receipt = await tx.wait();\n\n        // Check if the transaction was successfully completed\n        if (receipt.status === 1) {\n          console.log(\n            \"Domain minted! https://mumbai.polygonscan.com/tx/\" + tx.hash\n          );\n\n          // Set the record for the domain\n          tx = contract.setRecord(domain, record);\n          await tx.wait();\n\n          console.log(\n            \"Record set! https://mumbai.polygonscan.com/tx/\" + tx.hash\n          );\n\n          setRecord(\"\");\n          setDomain(\"\");\n        } else {\n          alert(\"Transaction failed! Please try again\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  //   Function to render if wallet is not connected yet\n  const renderNotConnectedContainer = (\n    <div className=\"connect-wallet-container\">\n      <img\n        src=\"https://media.giphy.com/media/2A3dOO9CqFPczXc5tD/giphy.gif\"\n        alt=\"Ninja gif\"\n      />\n      <button\n        onClick={connectWallet}\n        className=\"cta-button connect-wallet-button\"\n      >\n        Connect Wallet\n      </button>\n    </div>\n  );\n  const renderInputForm = () => {\n    return (\n      <div className=\"form-container\">\n        <div className=\"first-row\">\n          <input\n            type=\"text\"\n            value={domain}\n            placeholder=\"domain\"\n            onChange={(e) => setDomain(e.target.value)}\n          />\n          <p className=\"tld\"> {tld} </p>\n        </div>\n\n        <input\n          type=\"text\"\n          value={record}\n          placeholder=\"How do you Charlotte?\"\n          onChange={(e) => setRecord(e.target.value)}\n        />\n\n        <div className=\"button-container\">\n          <button\n            className=\"cta-button mint-button\"\n            disabled={null}\n            onClick={mintDomain}\n          >\n            Mint\n          </button>\n          <button\n            className=\"cta-button mint-button\"\n            disabled={null}\n            onClick={null}\n          >\n            Set data\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <header>\n            <div className=\"left\">\n              <p className=\"title\">Charlotte Name Service</p>\n              <p className=\"subtitle\">\n                All things Charlotte! All things Blockchain!\n              </p>\n            </div>\n            {/* Display a logo and wallet connection status */}\n\n            <div className=\"right\">\n              <img\n                alt=\"Network logo\"\n                className=\"logo\"\n                src={network.includes(\"Polygon\") ? polygonLogo : ethLogo}\n              />\n              {currentAccount ? (\n                <p>\n                  {\" \"}\n                  Wallet: {currentAccount.slice(0, 6)}...\n                  {currentAccount.slice(-4)}{\" \"}\n                </p>\n              ) : (\n                <p> Not connected </p>\n              )}\n            </div>\n          </header>\n        </div>\n        {!currentAccount && renderNotConnectedContainer}\n        {!currentAccount && renderNotConnectedContainer}\n        {!currentAccount && renderNotConnectedContainer}\n        {/* Render the input form if an account is connected */}\n        {currentAccount && renderInputForm()}{\" \"}\n        <div className=\"footer-container\">\n          {/* <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} /> */}\n          {/* <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n           >{`built with @${TWITTER_HANDLE}`}</a> */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}