{"ast":null,"code":"var _jsxFileName = \"/Users/darpa/Documents/Development/blockchain/buildspace/domain-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./styles/App.css\";\nimport { ethers } from \"ethers\"; // import twitterLogo from \"./assets/twitter-logo.svg\";\n\nimport contractAbi from \"./utils/contractAbi.json\";\nimport polygonLogo from \"./assets/polygonlogo.png\";\nimport ethLogo from \"./assets/ethlogo.png\";\nimport { networks } from \"./utils/networks\"; // Constants\n// const TWITTER_HANDLE = \"_buildspace\";\n// const TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tld = \".clt\";\nconst CONTRACT_ADDRESS = \"0x362A5E2f13A21E21b806362cc636eDfd4dC20B4F\"; // const provider = new ethers.providers.Web3Provider(ethereum);\n// const signer = provider.getSigner();\n// const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\"); //   State data properties\n\n  const [domain, setDomain] = useState(\"\");\n  const [record, setRecord] = useState(\"\");\n  const [network, setNetwork] = useState(\"\");\n  const [editing, setEditing] = useState(false);\n  const [mints, setMints] = useState(\"\");\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask => https://metamask.io/\");\n        return;\n      } //   Method to request access to account.\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const switchNetwork = async () => {\n    if (window.ethereum) {\n      try {\n        await window.ethereum.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{\n            chainId: \"0x13881\"\n          }]\n        });\n      } catch (error) {\n        if (error.code === 4902) {\n          try {\n            await window.ethereum.request({\n              method: \"wallet_addEthereumChain\",\n              params: [{\n                chainId: \"0x13881\",\n                chainName: \"Polygon Mumbai Testnet\",\n                rpcUrls: [\"https://rpc-mumbai.maticvigil.com/\"],\n                nativeCurrency: {\n                  name: \"Mumbai Matic\",\n                  symbol: \"MATIC\",\n                  decimals: 18\n                },\n                blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"]\n              }]\n            });\n          } catch (error) {\n            console.log(error);\n          }\n        }\n\n        console.log(error);\n      }\n    } else {\n      // If window.ethereum is not found\n      alert(\"MetaMask is not installed. Please install it to use this app: https://metamask.io/download.html\");\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the etherum object\", ethereum);\n    } //   Check if we're authorized to access the user's wallet\n\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n\n    const chainId = await ethereum.request({\n      method: \"eth_chainId\"\n    });\n    setNetwork(networks[chainId]);\n    ethereum.on(\"chainChanged\", handleChainChanged); // Reload page when network changes\n\n    function handleChainChanged(_chainId) {\n      window.location.reload();\n    }\n  };\n\n  const mintDomain = async () => {\n    // Don't run if the domain is empty\n    if (!domain) {\n      return;\n    } // Alert the user if the domain is too short\n\n\n    if (domain.length < 3) {\n      alert(\"Domain must be at least 3 characters long\");\n      return;\n    } // Calculate price based on length of domain (change this to match your contract)\n    // 3 chars = 0.5 MATIC, 4 chars = 0.3 MATIC, 5 or more = 0.1 MATIC\n\n\n    const price = domain.length === 3 ? \"0.5\" : domain.length === 4 ? \"0.3\" : \"0.1\";\n    console.log(\"Minting domain\", domain, \"with price\", price);\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let tx = await contract.register(domain, {\n          value: ethers.utils.parseEther(price)\n        }); // Wait for the transaction to be mined\n\n        const receipt = await tx.wait(); // Check if the transaction was successfully completed\n\n        if (receipt.status === 1) {\n          console.log(\"Domain minted! https://mumbai.polygonscan.com/tx/\" + tx.hash); // Set the record for the domain\n\n          tx = contract.setRecord(domain, record);\n          await tx.wait();\n          console.log(\"Record set! https://mumbai.polygonscan.com/tx/\" + tx.hash);\n          setTimeout(() => {\n            fetchMints();\n          }, 2000);\n          setRecord(\"\");\n          setDomain(\"\");\n        } else {\n          alert(\"Transaction failed! Please try again\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; //   Function to show recently purchased domains.\n\n\n  const fetchMints = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // You know all this\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer); // Get all the domain names from our contract\n\n        const names = await contract.getAllNames(); // For each name, get the record and the address\n\n        const mintRecords = await Promise.all(names.map(async name => {\n          const mintRecord = await contract.records(name);\n          const owner = await contract.domains(name);\n          return {\n            id: names.indexOf(name),\n            name: name,\n            record: mintRecord,\n            owner: owner\n          };\n        }));\n        console.log(\"MINTS FETCHED \", mintRecords);\n        setMints(mintRecords);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const updateDomain = async () => {\n    if (!record || !domain) {\n      return;\n    }\n\n    setLoading(true);\n    console.log(\"Updating domain\", domain, \"with record\", record);\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n        let tx = await contract.setRecord(domain, record);\n        await tx.wait();\n        console.log(\"Record set https://mumbai.polygonscan.com/tx/\" + tx.hash);\n        fetchMints();\n        setRecord(\"\");\n        setDomain(\"\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    setLoading(false);\n  }; //   Function to render if wallet is not connected yet\n\n\n  const renderNotConnectedContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connect-wallet-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"https://media.giphy.com/media/2A3dOO9CqFPczXc5tD/giphy.gif\",\n      alt: \"Ninja gif\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n\n  const renderInputForm = () => {\n    //   Checks if user is not on Polygon Mumbai Testnet.\n    if (network !== \"Polygon Mumbai Testnet\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Please switch to Polygon Mumbai Testnet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          onClick: switchNetwork,\n          children: \"Click to Switch Network\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"first-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: domain,\n          placeholder: \"domain\",\n          onChange: e => setDomain(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"tld\",\n          children: [\" \", tld, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: record,\n        placeholder: \"How do you Charlotte?\",\n        onChange: e => setRecord(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), editing ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          disabled: loading,\n          onClick: updateDomain,\n          children: \"Set record\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this), \"false\", /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          onClick: () => {\n            setEditing(false);\n          },\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // If editing is not true, the mint button will be returned instead\n      _jsxDEV(\"button\", {\n        className: \"cta-button mint-button\",\n        disabled: loading,\n        onClick: mintDomain,\n        children: \"Mint\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          disabled: null,\n          onClick: mintDomain,\n          children: \"Mint\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          disabled: null,\n          onClick: null,\n          children: \"Set data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this);\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    fetchMints();\n  }, [currentAccount, network]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"header\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"left\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: \"Charlotte Name Service\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"subtitle\",\n              children: \"All things Charlotte! All things Blockchain!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"right\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"Network logo\",\n              className: \"logo\",\n              src: network.includes(\"Polygon\") ? polygonLogo : ethLogo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 15\n            }, this), currentAccount ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\" \", \"Wallet: \", currentAccount.slice(0, 6), \"...\", currentAccount.slice(-4), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \" Not connected \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), !currentAccount && renderNotConnectedContainer, !currentAccount && renderNotConnectedContainer, !currentAccount && renderNotConnectedContainer, currentAccount && renderInputForm(), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 350,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"5qFNRt8QT8dYc3c2SuM94vaQ7Yk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/darpa/Documents/Development/blockchain/buildspace/domain-starter/src/App.js"],"names":["React","useEffect","useState","ethers","contractAbi","polygonLogo","ethLogo","networks","tld","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","domain","setDomain","record","setRecord","network","setNetwork","editing","setEditing","mints","setMints","connectWallet","ethereum","window","alert","accounts","request","method","console","log","error","switchNetwork","params","chainId","code","chainName","rpcUrls","nativeCurrency","name","symbol","decimals","blockExplorerUrls","checkIfWalletIsConnected","length","account","on","handleChainChanged","_chainId","location","reload","mintDomain","price","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","tx","register","value","utils","parseEther","receipt","wait","status","hash","setTimeout","fetchMints","names","getAllNames","mintRecords","Promise","all","map","mintRecord","records","owner","domains","id","indexOf","updateDomain","setLoading","renderNotConnectedContainer","renderInputForm","e","target","loading","includes","slice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./styles/App.css\";\nimport { ethers } from \"ethers\";\n// import twitterLogo from \"./assets/twitter-logo.svg\";\nimport contractAbi from \"./utils/contractAbi.json\";\nimport polygonLogo from \"./assets/polygonlogo.png\";\nimport ethLogo from \"./assets/ethlogo.png\";\nimport { networks } from \"./utils/networks\";\n\n// Constants\n// const TWITTER_HANDLE = \"_buildspace\";\n// const TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst tld = \".clt\";\nconst CONTRACT_ADDRESS = \"0x362A5E2f13A21E21b806362cc636eDfd4dC20B4F\";\n\n// const provider = new ethers.providers.Web3Provider(ethereum);\n// const signer = provider.getSigner();\n// const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  //   State data properties\n  const [domain, setDomain] = useState(\"\");\n  const [record, setRecord] = useState(\"\");\n  const [network, setNetwork] = useState(\"\");\n  const [editing, setEditing] = useState(false);\n  const [mints, setMints] = useState(\"\");\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask => https://metamask.io/\");\n        return;\n      }\n      //   Method to request access to account.\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const switchNetwork = async () => {\n    if (window.ethereum) {\n      try {\n        await window.ethereum.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: \"0x13881\" }],\n        });\n      } catch (error) {\n        if (error.code === 4902) {\n          try {\n            await window.ethereum.request({\n              method: \"wallet_addEthereumChain\",\n              params: [\n                {\n                  chainId: \"0x13881\",\n                  chainName: \"Polygon Mumbai Testnet\",\n                  rpcUrls: [\"https://rpc-mumbai.maticvigil.com/\"],\n                  nativeCurrency: {\n                    name: \"Mumbai Matic\",\n                    symbol: \"MATIC\",\n                    decimals: 18,\n                  },\n                  blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"],\n                },\n              ],\n            });\n          } catch (error) {\n            console.log(error);\n          }\n        }\n        console.log(error);\n      }\n    } else {\n      // If window.ethereum is not found\n      alert(\n        \"MetaMask is not installed. Please install it to use this app: https://metamask.io/download.html\"\n      );\n    }\n  };\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the etherum object\", ethereum);\n    }\n    //   Check if we're authorized to access the user's wallet\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n\n    const chainId = await ethereum.request({ method: \"eth_chainId\" });\n    setNetwork(networks[chainId]);\n\n    ethereum.on(\"chainChanged\", handleChainChanged);\n\n    // Reload page when network changes\n    function handleChainChanged(_chainId) {\n      window.location.reload();\n    }\n  };\n\n  const mintDomain = async () => {\n    // Don't run if the domain is empty\n    if (!domain) {\n      return;\n    }\n    // Alert the user if the domain is too short\n    if (domain.length < 3) {\n      alert(\"Domain must be at least 3 characters long\");\n      return;\n    }\n    // Calculate price based on length of domain (change this to match your contract)\n    // 3 chars = 0.5 MATIC, 4 chars = 0.3 MATIC, 5 or more = 0.1 MATIC\n    const price =\n      domain.length === 3 ? \"0.5\" : domain.length === 4 ? \"0.3\" : \"0.1\";\n    console.log(\"Minting domain\", domain, \"with price\", price);\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          contractAbi.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let tx = await contract.register(domain, {\n          value: ethers.utils.parseEther(price),\n        });\n        // Wait for the transaction to be mined\n        const receipt = await tx.wait();\n\n        // Check if the transaction was successfully completed\n        if (receipt.status === 1) {\n          console.log(\n            \"Domain minted! https://mumbai.polygonscan.com/tx/\" + tx.hash\n          );\n\n          // Set the record for the domain\n          tx = contract.setRecord(domain, record);\n          await tx.wait();\n\n          console.log(\n            \"Record set! https://mumbai.polygonscan.com/tx/\" + tx.hash\n          );\n\n          setTimeout(() => {\n            fetchMints();\n          }, 2000);\n\n          setRecord(\"\");\n          setDomain(\"\");\n        } else {\n          alert(\"Transaction failed! Please try again\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  //   Function to show recently purchased domains.\n  const fetchMints = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        // You know all this\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          contractAbi.abi,\n          signer\n        );\n\n        // Get all the domain names from our contract\n        const names = await contract.getAllNames();\n\n        // For each name, get the record and the address\n        const mintRecords = await Promise.all(\n          names.map(async (name) => {\n            const mintRecord = await contract.records(name);\n            const owner = await contract.domains(name);\n            return {\n              id: names.indexOf(name),\n              name: name,\n              record: mintRecord,\n              owner: owner,\n            };\n          })\n        );\n\n        console.log(\"MINTS FETCHED \", mintRecords);\n        setMints(mintRecords);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const updateDomain = async () => {\n    if (!record || !domain) {\n      return;\n    }\n    setLoading(true);\n    console.log(\"Updating domain\", domain, \"with record\", record);\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          contractAbi.abi,\n          signer\n        );\n\n        let tx = await contract.setRecord(domain, record);\n        await tx.wait();\n        console.log(\"Record set https://mumbai.polygonscan.com/tx/\" + tx.hash);\n\n        fetchMints();\n        setRecord(\"\");\n        setDomain(\"\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  //   Function to render if wallet is not connected yet\n  const renderNotConnectedContainer = (\n    <div className=\"connect-wallet-container\">\n      <img\n        src=\"https://media.giphy.com/media/2A3dOO9CqFPczXc5tD/giphy.gif\"\n        alt=\"Ninja gif\"\n      />\n      <button\n        onClick={connectWallet}\n        className=\"cta-button connect-wallet-button\"\n      >\n        Connect Wallet\n      </button>\n    </div>\n  );\n  const renderInputForm = () => {\n    //   Checks if user is not on Polygon Mumbai Testnet.\n    if (network !== \"Polygon Mumbai Testnet\") {\n      return (\n        <div className=\"connect-wallet-container\">\n          <h2>Please switch to Polygon Mumbai Testnet</h2>\n          {/* This button will call our switch network function */}\n          <button className=\"cta-button mint-button\" onClick={switchNetwork}>\n            Click to Switch Network\n          </button>\n        </div>\n      );\n    }\n    return (\n      <div className=\"form-container\">\n        <div className=\"first-row\">\n          <input\n            type=\"text\"\n            value={domain}\n            placeholder=\"domain\"\n            onChange={(e) => setDomain(e.target.value)}\n          />\n          <p className=\"tld\"> {tld} </p>\n        </div>\n\n        <input\n          type=\"text\"\n          value={record}\n          placeholder=\"How do you Charlotte?\"\n          onChange={(e) => setRecord(e.target.value)}\n        />\n        {editing ? (\n          <div className=\"button-container\">\n            {/* // This will call the updateDomain function we just made */}\n            <button\n              className=\"cta-button mint-button\"\n              disabled={loading}\n              onClick={updateDomain}\n            >\n              Set record\n            </button>\n            {/* // This will let us get out of editing mode by setting editing to */}\n            false\n            <button\n              className=\"cta-button mint-button\"\n              onClick={() => {\n                setEditing(false);\n              }}\n            >\n              Cancel\n            </button>\n          </div>\n        ) : (\n          // If editing is not true, the mint button will be returned instead\n          <button\n            className=\"cta-button mint-button\"\n            disabled={loading}\n            onClick={mintDomain}\n          >\n            Mint\n          </button>\n        )}\n\n        <div className=\"button-container\">\n          <button\n            className=\"cta-button mint-button\"\n            disabled={null}\n            onClick={mintDomain}\n          >\n            Mint\n          </button>\n          <button\n            className=\"cta-button mint-button\"\n            disabled={null}\n            onClick={null}\n          >\n            Set data\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    fetchMints();\n  }, [currentAccount, network]);\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <header>\n            <div className=\"left\">\n              <p className=\"title\">Charlotte Name Service</p>\n              <p className=\"subtitle\">\n                All things Charlotte! All things Blockchain!\n              </p>\n            </div>\n            {/* Display a logo and wallet connection status */}\n\n            <div className=\"right\">\n              <img\n                alt=\"Network logo\"\n                className=\"logo\"\n                src={network.includes(\"Polygon\") ? polygonLogo : ethLogo}\n              />\n              {currentAccount ? (\n                <p>\n                  {\" \"}\n                  Wallet: {currentAccount.slice(0, 6)}...\n                  {currentAccount.slice(-4)}{\" \"}\n                </p>\n              ) : (\n                <p> Not connected </p>\n              )}\n            </div>\n          </header>\n        </div>\n        {!currentAccount && renderNotConnectedContainer}\n        {!currentAccount && renderNotConnectedContainer}\n        {!currentAccount && renderNotConnectedContainer}\n        {/* Render the input form if an account is connected */}\n        {currentAccount && renderInputForm()}{\" \"}\n        <div className=\"footer-container\">\n          {/* <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} /> */}\n          {/* <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n           >{`built with @${TWITTER_HANDLE}`}</a> */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}